// Generated by Dagger (https://dagger.dev).
package google.codelabs.weatherapplication.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import google.codelabs.weatherapplication.database.forecast.daily.DailyForecastDB;
import google.codelabs.weatherapplication.database.forecast.daily.dao.DailyForecastDao;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DailyForecastModule_ProvideDailyForecastDBDaoFactory implements Factory<DailyForecastDao> {
  private final DailyForecastModule module;

  private final Provider<DailyForecastDB> dailyForecastDBProvider;

  public DailyForecastModule_ProvideDailyForecastDBDaoFactory(DailyForecastModule module,
      Provider<DailyForecastDB> dailyForecastDBProvider) {
    this.module = module;
    this.dailyForecastDBProvider = dailyForecastDBProvider;
  }

  @Override
  public DailyForecastDao get() {
    return provideDailyForecastDBDao(module, dailyForecastDBProvider.get());
  }

  public static DailyForecastModule_ProvideDailyForecastDBDaoFactory create(
      DailyForecastModule module, Provider<DailyForecastDB> dailyForecastDBProvider) {
    return new DailyForecastModule_ProvideDailyForecastDBDaoFactory(module, dailyForecastDBProvider);
  }

  public static DailyForecastDao provideDailyForecastDBDao(DailyForecastModule instance,
      DailyForecastDB dailyForecastDB) {
    return Preconditions.checkNotNullFromProvides(instance.provideDailyForecastDBDao(dailyForecastDB));
  }
}
