// Generated by Dagger (https://dagger.dev).
package google.codelabs.weatherapplication.repository.forecast;

import android.location.Geocoder;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import google.codelabs.weatherapplication.database.forecast.daily.dao.DailyForecastDao;
import google.codelabs.weatherapplication.database.forecast.hourly.dao.HourlyForecastDao;
import google.codelabs.weatherapplication.network.forecast.ForecastNetworkService;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ForecastRepository_Factory implements Factory<ForecastRepository> {
  private final Provider<DailyForecastDao> dailyForecastDaoProvider;

  private final Provider<HourlyForecastDao> hourlyForecastDaoProvider;

  private final Provider<ForecastNetworkService> forecastNetworkServiceProvider;

  private final Provider<Geocoder> geocoderProvider;

  public ForecastRepository_Factory(Provider<DailyForecastDao> dailyForecastDaoProvider,
      Provider<HourlyForecastDao> hourlyForecastDaoProvider,
      Provider<ForecastNetworkService> forecastNetworkServiceProvider,
      Provider<Geocoder> geocoderProvider) {
    this.dailyForecastDaoProvider = dailyForecastDaoProvider;
    this.hourlyForecastDaoProvider = hourlyForecastDaoProvider;
    this.forecastNetworkServiceProvider = forecastNetworkServiceProvider;
    this.geocoderProvider = geocoderProvider;
  }

  @Override
  public ForecastRepository get() {
    return newInstance(dailyForecastDaoProvider.get(), hourlyForecastDaoProvider.get(), forecastNetworkServiceProvider.get(), geocoderProvider.get());
  }

  public static ForecastRepository_Factory create(
      Provider<DailyForecastDao> dailyForecastDaoProvider,
      Provider<HourlyForecastDao> hourlyForecastDaoProvider,
      Provider<ForecastNetworkService> forecastNetworkServiceProvider,
      Provider<Geocoder> geocoderProvider) {
    return new ForecastRepository_Factory(dailyForecastDaoProvider, hourlyForecastDaoProvider, forecastNetworkServiceProvider, geocoderProvider);
  }

  public static ForecastRepository newInstance(DailyForecastDao dailyForecastDao,
      HourlyForecastDao hourlyForecastDao, ForecastNetworkService forecastNetworkService,
      Geocoder geocoder) {
    return new ForecastRepository(dailyForecastDao, hourlyForecastDao, forecastNetworkService, geocoder);
  }
}
