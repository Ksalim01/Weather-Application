// Generated by Dagger (https://dagger.dev).
package google.codelabs.weatherapplication.screen.cityweather.fragment;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import google.codelabs.weatherapplication.screen.cityweather.viewmodels.ForecastViewModel;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CityWeatherFragment_MembersInjector implements MembersInjector<CityWeatherFragment> {
  private final Provider<ForecastViewModel> viewModelProvider;

  public CityWeatherFragment_MembersInjector(Provider<ForecastViewModel> viewModelProvider) {
    this.viewModelProvider = viewModelProvider;
  }

  public static MembersInjector<CityWeatherFragment> create(
      Provider<ForecastViewModel> viewModelProvider) {
    return new CityWeatherFragment_MembersInjector(viewModelProvider);
  }

  @Override
  public void injectMembers(CityWeatherFragment instance) {
    injectViewModel(instance, viewModelProvider.get());
  }

  @InjectedFieldSignature("google.codelabs.weatherapplication.screen.cityweather.fragment.CityWeatherFragment.viewModel")
  public static void injectViewModel(CityWeatherFragment instance, ForecastViewModel viewModel) {
    instance.viewModel = viewModel;
  }
}
