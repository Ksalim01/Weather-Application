// Generated by Dagger (https://dagger.dev).
package google.codelabs.weatherapplication.network.forecast;

import android.location.Geocoder;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import google.codelabs.weatherapplication.network.forecast.api.WeatherAPI;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ForecastNetworkService_Factory implements Factory<ForecastNetworkService> {
  private final Provider<WeatherAPI> retrofitProvider;

  private final Provider<Geocoder> geocoderProvider;

  public ForecastNetworkService_Factory(Provider<WeatherAPI> retrofitProvider,
      Provider<Geocoder> geocoderProvider) {
    this.retrofitProvider = retrofitProvider;
    this.geocoderProvider = geocoderProvider;
  }

  @Override
  public ForecastNetworkService get() {
    return newInstance(retrofitProvider.get(), geocoderProvider.get());
  }

  public static ForecastNetworkService_Factory create(Provider<WeatherAPI> retrofitProvider,
      Provider<Geocoder> geocoderProvider) {
    return new ForecastNetworkService_Factory(retrofitProvider, geocoderProvider);
  }

  public static ForecastNetworkService newInstance(WeatherAPI retrofit, Geocoder geocoder) {
    return new ForecastNetworkService(retrofit, geocoder);
  }
}
